== get baffle == 
=== Method 1 (old) ===

based on Seamus' makebaf5.C_seamus

.x makebaf5.C_zwzhao+

enter root, then run
.x makebaf5.C_zwzhao+

it requires solout_CLEO_LD2_120d_nobaf_11GeV.root at  http://hallaweb.jlab.org/12GeV/SoLID/download/baffle/
It outputs the baffle opening in terminal, (NOT baffle blocks)

=== Method 2 (current) by Zhiwen Zhao===

The method is let the eDIS particles from same phi and different theta at vertex passing through baffle all the way. The baffle shape at each plate is customized to the field map and plate location and it's often curved. 
then a opening size in phi is determined by how positive and particles leaks behave and it can be directly related to acceptance. 
This is a straight forward way to design baffle
refer to 
http://hallaweb.jlab.org/12GeV/SoLID/download/baffle/talk/solid_baffle_zwzhao_20131015.pptx
http://hallaweb.jlab.org/12GeV/SoLID/download/baffle/talk/solid_baffle_zwzhao_20131015.ppf

11GeV eDIS event generated at
/home/zwzhao/work_halla/solid/solid_svn/solid/evgen/eicRate_20101102/output/PVDIS_LD2/rate_solid_PVDIS_LD2_eDIS_1e6.root
/home/zwzhao/work_halla/solid/solid_svn/solid/evgen/eicRate_20101102/output/PVDIS_LD2/rate_solid_PVDIS_LD2_eDIS_1e6.lund

use "run_solid_eDIS_nobaffle" to run GEMC and pass these eDIS events into SoLID with field and baffle observer which are virtual planes before baffle plates, but without baffle
Then we have baffleCLEOv8_eDIS_nobaffle.root

.x makebaffle.C+
this script will analysis hits on the baffle observers and calculate baffle opening shape for a narrow phi slice.
The baffle opening shape is ouput in terminal

Use the baffle opening shape and put them into baffle perl script, give it a opening size and see how positive and neutral leaks behave by using the "acceptance" tool
https://hallaweb.jlab.org/wiki/index.php/Solid_acceptance
When the positive leaks start to appear, you have the max opening.
To remove the neutral leaks still exist, add another baffle plane before EC to block it.

== plot baffle ==

baffle_plot.C can plot baffle blocks
you need to copy paste the baffle output into the code 

== get ApvErr ==
use "run_solid_baffle_eDIS" to pass eDIS as input to run gemc with baffle to obtain root file
then run the root script to get Err_Apv
pvdis_FOM.C("baffleCLEOv8_0.55x5deg.root",false)  //without trig cut
pvdis_FOM.C("baffleCLEOv8_0.55x5deg.root",true)   //with trig cut



